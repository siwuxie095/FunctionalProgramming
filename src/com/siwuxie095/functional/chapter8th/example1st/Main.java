package com.siwuxie095.functional.chapter8th.example1st;

/**
 * @author Jiajing Li
 * @date 2020-10-25 16:08:42
 */
public class Main {

    /**
     * 􏰬􏰭􏰋􏰮􏰫􏰯􏰰􏰱设计和架构的原则
     *
     * 软件开发最重要的设计工具不是什么技术，而是一颗在设计原则方面训练有素的头脑。
     *                                                 —— Craig Larman
     *
     * Lambda 表达式是对 Java 语言的一点简单改进，在 JDK 标准类库中，运行它的方式各种各样。但是大多数 Java 代码都不是
     * 由开发 JDK 的程序员写的，而是像你我这样的普通程序员。为了最大限度发挥 Lambda 表达式的优势，就需要将其引入已有代码
     * 中。作为一名职业 Java 程序员，Lambda 表达式没有什么特别的，和接口、类一样，它只是程序员工具箱中的一件新工具。
     *
     * 这里将介绍如何使用 Lambda 表达式实现 SOLID 原则，该原则是开发良好面向对象程序的准则。使用 Lambda 表达式，还能改
     * 进一些现有的设计模式，这里也会简要介绍几个这样的例子。
     *
     * 和同事一起工作时，肯定会遇到这样的情况：你实现了一个新功能或修复了一个缺陷，并且对自己的修改很满意。但其他人看了你
     * 的代码后（比如发生在代码审查环节，即 Code Review），却完全不买账！对于什么是好代码，什么是坏代码，存在分歧很正常。
     *
     * 大多数时候，人们意见不统一，是他们各自都有自己的想法。审查你代码的人可能会选择另一种实现方式，这并不是说你们俩谁对
     * 谁错。引入 Lambda 表达式后，又多了一个话题。这并不是说该功能本身有多复杂，或者需要花大力气去争论，而是人们在讨论
     * 设计问题时又多了一项谈资。
     *
     * 这里旨在帮助大家写出优秀的程序，将会给出一些良好的设计原则和模式，在此基础之上，就能开发出可维护且十分可靠的程序。
     * 这里不光会用到 JDK 提供的崭新类库，而且会教大家如何在自己的领域和应用程序中使用 Lambda 表达式。
     */
    public static void main(String[] args) {

    }

}
