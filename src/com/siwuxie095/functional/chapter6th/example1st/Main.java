package com.siwuxie095.functional.chapter6th.example1st;

/**
 * @author Jiajing Li
 * @date 2020-10-23 07:49:53
 */
public class Main {

    /**
     * 􏰖􏰗􏰘􏰙􏰚􏰖􏰗􏰘􏰙􏰚􏰖􏰗􏰘􏰙􏰚数据并行化
     *
     * 在 Java 8 中，编写并行化的程序很容易。这都多亏了 Lambda 表达式和流，完全不必理会串行或并行，只要
     * 告诉程序该做什么就行了。这听起来和长久以来使用 Java 编程的方式并无区别，但告诉计算机做什么和怎么做
     * 是完全不同的。
     *
     * 从外部迭代到内部迭代的过渡，确实让编写简洁的代码更加容易，但这还不是唯一的好处，另一个好处是程序员
     * 不需要手动控制迭代过程了。迭代过程不是非要串行化，通过改动一个方法调用来告诉计算机程序员的意图，就
     * 会出现一个类库（即 API）指明怎么做。
     *
     * 代码的改动微不足道，因此这里的主要内容并不在于如何更改代码，而是讲述为什么需要并行化以及什么时候会
     * 带来性能的提升。
     */
    public static void main(String[] args) {

    }

}
